{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Z9aqicQXMgK",
        "outputId": "bf42d49b-335f-4c52-fe61-749386933b58"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "TODO LIST\n",
            "1. Add Task\n",
            "2. Remove Task\n",
            "3. Complete Task\n",
            "4. View Tasks\n",
            "5. Exit\n",
            "Enter your choice: 1\n",
            "Enter task name: logistics\n",
            "Enter priority (high, medium, low): medium\n",
            "Enter due date (YYYY-MM-DD): 2024-03-18\n",
            "Task added successfully!\n",
            "\n",
            "TODO LIST\n",
            "1. Add Task\n",
            "2. Remove Task\n",
            "3. Complete Task\n",
            "4. View Tasks\n",
            "5. Exit\n",
            "Enter your choice: 4\n",
            "Tasks:\n",
            "1. [ ] logistics - Priority: medium, Due Date: 2024-03-18\n",
            "\n",
            "TODO LIST\n",
            "1. Add Task\n",
            "2. Remove Task\n",
            "3. Complete Task\n",
            "4. View Tasks\n",
            "5. Exit\n",
            "Enter your choice: 1\n",
            "Enter task name: attend to the navy day\n",
            "Enter priority (high, medium, low): high\n",
            "Enter due date (YYYY-MM-DD): 2024-12-04\n",
            "Task added successfully!\n",
            "\n",
            "TODO LIST\n",
            "1. Add Task\n",
            "2. Remove Task\n",
            "3. Complete Task\n",
            "4. View Tasks\n",
            "5. Exit\n"
          ]
        }
      ],
      "source": [
        "import json\n",
        "import os\n",
        "from datetime import datetime\n",
        "\n",
        "# File to store tasks\n",
        "TASKS_FILE = \"tasks.json\"\n",
        "\n",
        "# Function to load tasks from file\n",
        "def load_tasks():\n",
        "    if os.path.exists(TASKS_FILE):\n",
        "        with open(TASKS_FILE, 'r') as file:\n",
        "            return json.load(file)\n",
        "    else:\n",
        "        return []\n",
        "\n",
        "# Function to save tasks to file\n",
        "def save_tasks(tasks):\n",
        "    with open(TASKS_FILE, 'w') as file:\n",
        "        json.dump(tasks, file, indent=4)\n",
        "\n",
        "# Function to add a task\n",
        "def add_task(tasks):\n",
        "    task_name = input(\"Enter task name: \")\n",
        "    priority = input(\"Enter priority (high, medium, low): \").lower()\n",
        "    due_date = input(\"Enter due date (YYYY-MM-DD): \")\n",
        "    tasks.append({\"name\": task_name, \"priority\": priority, \"due_date\": due_date, \"completed\": False})\n",
        "    save_tasks(tasks)\n",
        "    print(\"Task added successfully!\")\n",
        "\n",
        "# Function to remove a task\n",
        "def remove_task(tasks):\n",
        "    display_tasks(tasks)\n",
        "    index = int(input(\"Enter the index of the task to remove: \")) - 1\n",
        "    if 0 <= index < len(tasks):\n",
        "        del tasks[index]\n",
        "        save_tasks(tasks)\n",
        "        print(\"Task removed successfully!\")\n",
        "    else:\n",
        "        print(\"Invalid index\")\n",
        "\n",
        "# Function to mark a task as completed\n",
        "def complete_task(tasks):\n",
        "    display_tasks(tasks)\n",
        "    index = int(input(\"Enter the index of the completed task: \")) - 1\n",
        "    if 0 <= index < len(tasks):\n",
        "        tasks[index][\"completed\"] = True\n",
        "        save_tasks(tasks)\n",
        "        print(\"Task marked as completed!\")\n",
        "    else:\n",
        "        print(\"Invalid index\")\n",
        "\n",
        "# Function to display tasks\n",
        "def display_tasks(tasks):\n",
        "    if not tasks:\n",
        "        print(\"No tasks found!\")\n",
        "    else:\n",
        "        print(\"Tasks:\")\n",
        "        for i, task in enumerate(tasks, start=1):\n",
        "            status = \"[ ]\" if not task[\"completed\"] else \"[X]\"\n",
        "            print(f\"{i}. {status} {task['name']} - Priority: {task['priority']}, Due Date: {task['due_date']}\")\n",
        "\n",
        "# Main function\n",
        "def main():\n",
        "    tasks = load_tasks()\n",
        "\n",
        "    while True:\n",
        "        print(\"\\nTODO LIST\")\n",
        "        print(\"1. Add Task\")\n",
        "        print(\"2. Remove Task\")\n",
        "        print(\"3. Complete Task\")\n",
        "        print(\"4. View Tasks\")\n",
        "        print(\"5. Exit\")\n",
        "        choice = input(\"Enter your choice: \")\n",
        "\n",
        "        if choice == \"1\":\n",
        "            add_task(tasks)\n",
        "        elif choice == \"2\":\n",
        "            remove_task(tasks)\n",
        "        elif choice == \"3\":\n",
        "            complete_task(tasks)\n",
        "        elif choice == \"4\":\n",
        "            display_tasks(tasks)\n",
        "        elif choice == \"5\":\n",
        "            break\n",
        "        else:\n",
        "            print(\"Invalid choice\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ]
}
